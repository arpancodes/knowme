{"version":3,"sources":["assets/logo.png","components/Header.js","components/Button.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","src","logo","alt","Button","props","style","backgroundColor","color","target","rel","href","concat","link","username","className","icon","children","App","src_components_Header","src_components_Button","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sPCSzBC,SALA,kBACbC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKC,IAAKC,IAAMC,IAAI,YCSTC,SAZA,SAAAC,GAAK,OAClBP,EAAAC,EAAAC,cAAA,KACEM,MAAO,CAAEC,gBAAiBF,EAAMG,OAChCC,OAAO,SACPC,IAAI,sBACJC,KAAI,eAAAC,OAAiBP,EAAMQ,KAAvB,KAAAD,OAA+BP,EAAMS,WAEzChB,EAAAC,EAAAC,cAAA,KAAGe,UAAS,UAAAH,OAAYP,EAAMW,QAC9BlB,EAAAC,EAAAC,cAAA,WACCK,EAAMY,YCoEIC,MA3Ef,WACE,OACEpB,EAAAC,EAAAC,cAAA,OAAKe,UAAU,OACbjB,EAAAC,EAAAC,cAACmB,EAAD,MACArB,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,OAAKe,UAAU,oBACbjB,EAAAC,EAAAC,cAACoB,EAAD,CACEJ,KAAK,UACLR,MAAM,UACNK,KAAK,cACLC,SAAS,cAJX,WAQAhB,EAAAC,EAAAC,cAACoB,EAAD,CACEJ,KAAK,YACLR,MAAM,UACNK,KAAK,gBACLC,SAAS,cAJX,aAQAhB,EAAAC,EAAAC,cAACoB,EAAD,CACEJ,KAAK,WACLR,MAAM,UACNK,KAAK,SACLC,SAAS,cAJX,YAQAhB,EAAAC,EAAAC,cAACoB,EAAD,CACEJ,KAAK,UACLR,MAAM,UACNK,KAAK,cACLC,SAAS,oCAJX,WAQAhB,EAAAC,EAAAC,cAACoB,EAAD,CACEJ,KAAK,SACLR,MAAM,UACNK,KAAK,aACLC,SAAS,cAJX,UAQAhB,EAAAC,EAAAC,cAACoB,EAAD,CACEJ,KAAK,UACLR,MAAM,UACNK,KAAK,aACLC,SAAS,cAJX,WAQAhB,EAAAC,EAAAC,cAACoB,EAAD,CACEJ,KAAK,WACLR,MAAM,UACNK,KAAK,eACLC,SAAS,+BAJX,YAQAhB,EAAAC,EAAAC,cAACoB,EAAD,CACEJ,KAAK,GACLR,MAAM,UACNK,KAAK,aACLC,SAAS,mCAJX,aCvDYO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ea98b1d7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.efc7b1a3.png\";","import React from \"react\";\nimport logo from \"../assets/logo.png\";\nimport \"./Header.css\";\n\nconst Header = () => (\n  <header>\n    <img src={logo} alt=\"logo\" />\n  </header>\n);\nexport default Header;\n","import React from \"react\";\nimport \"./Button.css\";\n\nconst Button = props => (\n  <a\n    style={{ backgroundColor: props.color }}\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n    href={`https://www.${props.link}/${props.username}`}\n  >\n    <i className={`fab fa-${props.icon}`} />\n    <br />\n    {props.children}\n  </a>\n);\nexport default Button;\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport Button from \"./components/Button\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <h1>Let's connect ‚ù§</h1>\n      <div className=\"button-container\">\n        <Button\n          icon=\"twitter\"\n          color=\"#3498db\"\n          link=\"twitter.com\"\n          username=\"arpancodes\"\n        >\n          Twitter\n        </Button>\n        <Button\n          icon=\"instagram\"\n          color=\"#8e44ad\"\n          link=\"instagram.com\"\n          username=\"arpancodes\"\n        >\n          Instagram\n        </Button>\n        <Button\n          icon=\"facebook\"\n          color=\"#3b5998\"\n          link=\"fb.com\"\n          username=\"arpancodes\"\n        >\n          Facebook\n        </Button>\n        <Button\n          icon=\"youtube\"\n          color=\"#c0392b\"\n          link=\"youtube.com\"\n          username=\"channel/UCK-Tw8Dzu9e9ZxgQqoZzKAg\"\n        >\n          Youtube\n        </Button>\n        <Button\n          icon=\"github\"\n          color=\"#7f8c8d\"\n          link=\"github.com\"\n          username=\"arpancodes\"\n        >\n          Github\n        </Button>\n        <Button\n          icon=\"codepen\"\n          color=\"#2c3e50\"\n          link=\"codepen.io\"\n          username=\"arpancodes\"\n        >\n          Codepen\n        </Button>\n        <Button\n          icon=\"linkedin\"\n          color=\"#2980b9\"\n          link=\"linkedin.com\"\n          username=\"in/arpan-abhishek-1578a6165\"\n        >\n          LinkedIn\n        </Button>\n        <Button\n          icon=\"\"\n          color=\"#2ecc71\"\n          link=\"upwork.com\"\n          username=\"freelancers/~01f994f6b8bd6e7528\"\n        >\n          upwork\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}